// Code generated by go-swagger; DO NOT EDIT.

package bug

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NewListBugsParams creates a new ListBugsParams object
// with the default values initialized.
func NewListBugsParams() ListBugsParams {

	var (
		// initialize parameters with default values

		pageSizeDefault = int64(20)
	)

	return ListBugsParams{
		PageSize: &pageSizeDefault,
	}
}

// ListBugsParams contains all the bound params for the list bugs operation
// typically these are obtained from a http.Request
//
// swagger:parameters listBugs
type ListBugsParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*
	  In: query
	*/
	Cursor *string
	/*Maximal number of record return in one page, server may return less.
	  Maximum: 1000
	  Minimum: 0
	  In: query
	  Default: 20
	*/
	PageSize *int64
	/*Fields by which the records are sorted
	  In: query
	*/
	SortBy *string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewListBugsParams() beforehand.
func (o *ListBugsParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qCursor, qhkCursor, _ := qs.GetOK("cursor")
	if err := o.bindCursor(qCursor, qhkCursor, route.Formats); err != nil {
		res = append(res, err)
	}

	qPageSize, qhkPageSize, _ := qs.GetOK("page_size")
	if err := o.bindPageSize(qPageSize, qhkPageSize, route.Formats); err != nil {
		res = append(res, err)
	}

	qSortBy, qhkSortBy, _ := qs.GetOK("sort_by")
	if err := o.bindSortBy(qSortBy, qhkSortBy, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindCursor binds and validates parameter Cursor from query.
func (o *ListBugsParams) bindCursor(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.Cursor = &raw

	return nil
}

// bindPageSize binds and validates parameter PageSize from query.
func (o *ListBugsParams) bindPageSize(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewListBugsParams()
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("page_size", "query", "int64", raw)
	}
	o.PageSize = &value

	if err := o.validatePageSize(formats); err != nil {
		return err
	}

	return nil
}

// validatePageSize carries on validations for parameter PageSize
func (o *ListBugsParams) validatePageSize(formats strfmt.Registry) error {

	if err := validate.MinimumInt("page_size", "query", int64(*o.PageSize), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("page_size", "query", int64(*o.PageSize), 1000, false); err != nil {
		return err
	}

	return nil
}

// bindSortBy binds and validates parameter SortBy from query.
func (o *ListBugsParams) bindSortBy(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.SortBy = &raw

	return nil
}
