// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"
	"io"
	"io/ioutil"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// Resource The basic object
//
// swagger:discriminator Resource resource_type
type Resource interface {
	runtime.Validatable

	// id
	// Required: true
	ID() *int64
	SetID(*int64)

	// name
	// Required: true
	Name() *Name
	SetName(*Name)

	// type of the resource
	// Required: true
	ResourceType() string
	SetResourceType(string)

	// AdditionalProperties in base type shoud be handled just like regular properties
	// At this moment, the base type property is pushed down to the subtype
}

type resource struct {
	idField *int64

	nameField *Name

	resourceTypeField string
}

// ID gets the id of this polymorphic type
func (m *resource) ID() *int64 {
	return m.idField
}

// SetID sets the id of this polymorphic type
func (m *resource) SetID(val *int64) {
	m.idField = val
}

// Name gets the name of this polymorphic type
func (m *resource) Name() *Name {
	return m.nameField
}

// SetName sets the name of this polymorphic type
func (m *resource) SetName(val *Name) {
	m.nameField = val
}

// ResourceType gets the resource type of this polymorphic type
func (m *resource) ResourceType() string {
	return "Resource"
}

// SetResourceType sets the resource type of this polymorphic type
func (m *resource) SetResourceType(val string) {
}

// UnmarshalResourceSlice unmarshals polymorphic slices of Resource
func UnmarshalResourceSlice(reader io.Reader, consumer runtime.Consumer) ([]Resource, error) {
	var elements []json.RawMessage
	if err := consumer.Consume(reader, &elements); err != nil {
		return nil, err
	}

	var result []Resource
	for _, element := range elements {
		obj, err := unmarshalResource(element, consumer)
		if err != nil {
			return nil, err
		}
		result = append(result, obj)
	}
	return result, nil
}

// UnmarshalResource unmarshals polymorphic Resource
func UnmarshalResource(reader io.Reader, consumer runtime.Consumer) (Resource, error) {
	// we need to read this twice, so first into a buffer
	data, err := ioutil.ReadAll(reader)
	if err != nil {
		return nil, err
	}
	return unmarshalResource(data, consumer)
}

func unmarshalResource(data []byte, consumer runtime.Consumer) (Resource, error) {
	buf := bytes.NewBuffer(data)
	buf2 := bytes.NewBuffer(data)

	// the first time this is read is to fetch the value of the resource_type property.
	var getType struct {
		ResourceType string `json:"resource_type"`
	}
	if err := consumer.Consume(buf, &getType); err != nil {
		return nil, err
	}

	if err := validate.RequiredString("resource_type", "body", getType.ResourceType); err != nil {
		return nil, err
	}

	// The value of resource_type is used to determine which type to create and unmarshal the data into
	switch getType.ResourceType {
	case "Bug":
		var result Bug
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	case "Fish":
		var result Fish
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	case "Resource":
		var result resource
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	}
	return nil, errors.New(422, "invalid resource_type value: %q", getType.ResourceType)
}

// Validate validates this resource
func (m *resource) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *resource) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID()); err != nil {
		return err
	}

	return nil
}

func (m *resource) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name()); err != nil {
		return err
	}

	if m.Name() != nil {
		if err := m.Name().Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("name")
			}
			return err
		}
	}

	return nil
}
